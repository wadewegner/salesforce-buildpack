#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

START_TIME=$SECONDS

# set -x
set -o errexit      # always exit on error
set -o pipefail     # don't ignore exit codes when piping output
unset GIT_DIR       # Avoid GIT_DIR leak from previous build steps

### Configure directories
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

# set defaults for optional config vars
: ${SFDX_BUILDPACK_DEBUG:="false"}

### Load additional functions
source $BP_DIR/lib/common.sh
source $BP_DIR/lib/sfdx.sh
source $BP_DIR/lib/stdlib.sh

export_env "$ENV_DIR"
setup_dirs "$BUILD_DIR"

vendorDir="vendor/sfdx"
mkdir -p $BUILD_DIR/$vendorDir

if [ "$CI" == "true" ]; then

  mkdir -p $BUILD_DIR/bin

  testSetupScript=$BUILD_DIR/bin/test-setup.sh
  testRunScript=$BUILD_DIR/bin/test.sh

  cp $BP_DIR/files/test-setup.txt $BUILD_DIR/bin/test-setup.txt
  cp $BP_DIR/files/test-success.txt $BUILD_DIR/bin/test-success.txt

  echo "cat $BUILD_DIR/bin/test-setup.txt" > $testSetupScript
  chmod +x $testSetupScript

  echo "cat $BUILD_DIR/bin/test-success.txt" > $testRunScript
  chmod +x $testRunScript

else 

  if [ "$STAGE" == "" ]; then
    echo "$(cat files/reviewapp-build.txt)"
  elif [ "$STAGE" == "DEV" ]; then
    echo "$(cat files/dev-build.txt)"
  elif [ "$STAGE" == "STAGING" ]; then
    echo "$(cat files/staging-build.txt)"
  else
    echo "$(cat files/prod-build.txt)"
  fi

fi


echo "# Deploy source to production org.
release: ./"$vendorDir"/release.sh \"$TARGET_SCRATCH_ORG_ALIAS\" \"$SFDX_PACKAGE_VERSION_ID\"" > $BUILD_DIR/Procfile

cp $BP_DIR/lib/release.sh $BUILD_DIR/"$vendorDir"/
cp $BP_DIR/lib/common.sh $BUILD_DIR/"$vendorDir"/
cp $BP_DIR/lib/sfdx.sh $BUILD_DIR/"$vendorDir"/
cp $BP_DIR/lib/stdlib.sh $BUILD_DIR/"$vendorDir"/

cp $BP_DIR/files/reviewapp-release.txt $BUILD_DIR/"$vendorDir"/
cp $BP_DIR/files/dev-release.txt $BUILD_DIR/"$vendorDir"/
cp $BP_DIR/files/staging-release.txt $BUILD_DIR/"$vendorDir"/
cp $BP_DIR/files/prod-release.txt $BUILD_DIR/"$vendorDir"/

exit 0